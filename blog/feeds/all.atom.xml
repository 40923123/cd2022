<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>cd2022</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2022-03-30T16:33:24+08:00</updated><entry><title>2022 協同產品設計</title><link href="./w6_40923123.html" rel="alternate"></link><published>2022-03-30T11:00:00+08:00</published><updated>2022-03-30T16:33:24+08:00</updated><author><name>yen</name></author><id>tag:None,2022-03-30:./w6_40923123.html</id><summary type="html">&lt;p&gt;2022 協同產品設計課程&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 協同產品設計課程&lt;/p&gt;


&lt;h2&gt;關於協同&lt;/h2&gt;
&lt;p&gt;這一篇是我關於協同部分所寫的文章(僅供個人思想&lt;/p&gt;
&lt;p&gt;問題:&lt;/p&gt;
&lt;p&gt;首先進行第一種猜想(能否讓所有組員同時進行倉儲修改?
目前的答案為否&lt;/p&gt;
&lt;p&gt;1.進行改版在上傳時是需要個人的KEY的，如果依字面上若想做倒他人也能上傳勢必要有倉儲組長個人的key，但是測試過key是沒有辦法多個帳號共用&lt;/p&gt;
&lt;p&gt;2.PPK同理一個PPK只能登記在一個帳號無法共用所以目前無法同時更新&lt;/p&gt;
&lt;p&gt;第二種猜想(假設可以同時更新那解決版本衝突得如何運行
1.第一種情況如果一個文本在序列第40行後增加字串，那如果第二人在之後也以先前未改版版本進行並也在第40行之後進行更改兩邊發生衝突該如何解決?&lt;/p&gt;
&lt;p&gt;我的想法是因該可以寫一段程式幫每則增加的訊息在添加之前把他們上一句進行標記，當今天標記衝突時程式可以跳出訊息並將此段訊息銜接在另一段上，也就是在推送之前先把別人的資料pull下來發現標記有更動則自動變更到新訊息的最後一行在推送&lt;/p&gt;
&lt;p&gt;2.第二種強況如在修改的檔案被人刪除時應該怎麼辦，簡單來說每則訊息甚至檔案都是有所謂的贆投如果今天在修改時標頭不見時會讓檔案無法分類進而導致錯亂，關於標題頭問題我之前有遇到類似的，USB裡的檔案貌似在退出時手續不對導致標題頭遺失，電腦沒有辦法綁資料分類導致所有相關檔案全部變成亂碼並且無法判斷數量及大小，目前個人猜想如果在編輯檔案時直接被其他人刪除時，在推送時應該會出現類似的問題，要修改的檔案被刪除電腦無法判斷訊息是被歸類在哪裡進而出現錯誤&lt;/p&gt;
&lt;p&gt;我的想法目前也只能將此段訊息用一個程式幫忙賦予新的檔案讓他在出現類似錯誤時先直接開新的檔案紀錄下來，後面再進行除錯&lt;/p&gt;
&lt;p&gt;第三種猜想(關於程式協同及機械類的協同
課堂上老師說過程式協同其實相比於機械的協同是可以比較即時的，因為機械相關在協同是必須去與真實情況變動，並且機械及真實受限於很多的規則束腹很難做到非常及時的協同，畢竟很多零件並不像程式一樣隨叫隨到&lt;/p&gt;
&lt;h2&gt;關於git指令失效&lt;/h2&gt;
&lt;p&gt;事情緣由是由2022/03/22晚上在製作影片時發生目前還未知的問題進而導致git指令失效，目前推測原因還是未知，首先推送檔案並未超過(單個檔案&amp;gt;50MB，再者前面也有推送但是沒有問題，所以目前無法判斷有何種問題&lt;/p&gt;
&lt;p&gt;解決方法: 將整個近端資料夾刪除後再從github上重新複製下來就沒有問題，關於git並未更改其他東西只是在其他電腦時就自行解決了，有可能是git在運行時path錯亂沒有讀到相關git的執行檔所以才導致至些問題的&lt;/p&gt;
&lt;h2&gt;W3 NX教學影片製作&lt;/h2&gt;
&lt;p&gt;第1部: &lt;a href="https://40923123.github.io/cd2022/downloads/2022031501.mp4"&gt;影片網址1&lt;/a&gt;
第9部: &lt;a href="https://40923123.github.io/cd2022/downloads/2022031502.mp4"&gt;影片網址9&lt;/a&gt;
第14部: &lt;a href="https://40923123.github.io/cd2022/downloads/2022032101.mp4"&gt;影片網址14&lt;/a&gt;
第19部: &lt;a href="https://40923123.github.io/cd2022/downloads/2022032201.mp4"&gt;影片網址19&lt;/a&gt;
第31部: &lt;a href="https://40923123.github.io/cd2022/downloads/2022032202.mp4"&gt;影片網址31&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;新增倉儲步驟&lt;/h2&gt;
&lt;p&gt;原本cmsimde的內容主分支是master所以一開始他會因為遠端是main而無法推送，所以在近端新增main分支並將master merge到main裡，先用git remote add origin建立連結，然後在main的情況下把遠端的 README.md給pull下來&lt;/p&gt;
&lt;p&gt;簡單來說就是cmsimde本身是屬於master而遠端是main所以主要的大問題是處理分支衝突&lt;/p&gt;
&lt;p&gt;下方有影片可以點進去看裡面有詳細步驟還有字幕&lt;/p&gt;</content><category term="Misc"></category><category term="w6_40923123"></category></entry></feed>